{"version":3,"sources":["scripts/main.js"],"names":["grid","score","gameStarted","initGame","createEmptyGrid","updateScore","addRandomTile","drawGrid","hideGameOverMessage","Array","map","fill","emptyTiles","i","j","push","length","Math","floor","random","gridContainer","document","getElementById","innerHTML","forEach","row","value","tile","createElement","className","textContent","appendChild","isGameOver","isGameWon","showGameWinMessage","showGameOverMessage","handleInput","e","key","showButtonRestart","hideStartGame","oldGrid","JSON","stringify","moveTiles","mergeTiles","direction","isVertical","isForward","cell","missing","zeros","concat","current","next","mergedTile","isGridFull","canMakeMove","every","style","cssText","showButton","hiddenButton","addEventListener"],"mappings":"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","file":"main.34521c0f.js","sourceRoot":"..\\src","sourcesContent":["'use strict';\n\n// write your code here\nlet grid, score, gameStarted;\n\ndocument.getElementById('new-game').addEventListener('click', initGame);\ndocument.getElementById('restart').addEventListener('click', initGame);\ndocument.addEventListener('keydown', handleInput);\n\nfunction initGame() {\n  grid = createEmptyGrid();\n  score = 0;\n  gameStarted = false;\n  updateScore();\n  addRandomTile();\n  addRandomTile();\n  drawGrid();\n  hideGameOverMessage();\n}\n\nfunction createEmptyGrid() {\n  return [...Array(4)].map(() => Array(4).fill(0));\n}\n\nfunction addRandomTile() {\n  const emptyTiles = [];\n\n  for (let i = 0; i < 4; i++) {\n    for (let j = 0; j < 4; j++) {\n      if (grid[i][j] === 0) {\n        emptyTiles.push({\n          i, j,\n        });\n      }\n    }\n  }\n\n  if (emptyTiles.length) {\n    const { i, j } = emptyTiles[Math.floor(Math.random() * emptyTiles.length)];\n\n    grid[i][j] = Math.random() > 0.9 ? 4 : 2;\n  }\n}\n\nfunction drawGrid() {\n  const gridContainer = document.getElementById('grid-container');\n\n  gridContainer.innerHTML = '';\n\n  grid.forEach((row, i) => {\n    row.forEach((value, j) => {\n      const tile = document.createElement('div');\n\n      tile.className = 'field-cell' + (value ? ` field-cell--${value}` : '');\n      tile.textContent = value || '';\n      gridContainer.appendChild(tile);\n    });\n  });\n\n  if (isGameOver()) {\n    if (isGameWon()) {\n      showGameWinMessage();\n    } else {\n      showGameOverMessage();\n    }\n  }\n}\n\nfunction handleInput(e) {\n  if (isGameOver()) {\n    return;\n  }\n\n  const key = e.key;\n\n  if (key === 'ArrowUp'\n    || key === 'ArrowDown'\n    || key === 'ArrowLeft'\n    || key === 'ArrowRight'\n  ) {\n    if (!gameStarted) {\n      gameStarted = true;\n      showButtonRestart();\n      hideStartGame();\n    }\n\n    const oldGrid = JSON.stringify(grid);\n\n    moveTiles(key);\n    mergeTiles(key);\n    moveTiles(key);\n\n    if (oldGrid !== JSON.stringify(grid)) {\n      addRandomTile();\n    }\n\n    drawGrid();\n    updateScore();\n  }\n}\n\nfunction moveTiles(direction) {\n  const isVertical = direction === 'ArrowUp' || direction === 'ArrowDown';\n  const isForward = direction === 'ArrowRight' || direction === 'ArrowDown';\n\n  for (let i = 0; i < 4; i++) {\n    let row = [];\n\n    for (let j = 0; j < 4; j++) {\n      const cell = isVertical ? grid[j][i] : grid[i][j];\n\n      if (cell) {\n        row.push(cell);\n      }\n    }\n\n    const missing = 4 - row.length;\n    const zeros = Array(missing).fill(0);\n\n    row = isForward ? zeros.concat(row) : row.concat(zeros);\n\n    for (let j = 0; j < 4; j++) {\n      if (isVertical) {\n        grid[j][i] = row[j];\n      } else {\n        grid[i][j] = row[j];\n      }\n    }\n  }\n}\n\nfunction mergeTiles(direction) {\n  const isVertical = direction === 'ArrowUp' || direction === 'ArrowDown';\n  const isForward = direction === 'ArrowRight' || direction === 'ArrowDown';\n\n  for (let i = 0; i < 4; i++) {\n    for (\n      let j = isForward ? 3 : 0;\n      isForward ? j > 0 : j < 3;\n      isForward ? j-- : j++\n    ) {\n      const current = isVertical ? grid[j][i] : grid[i][j];\n      const next = isVertical\n        ? grid[isForward ? j - 1 : j + 1][i]\n        : grid[i][isForward ? j - 1 : j + 1];\n\n      if (current !== 0 && current === next) {\n        const mergedTile = current * 2;\n\n        isVertical ? grid[j][i] = mergedTile : grid[i][j] = mergedTile;\n\n        isVertical ? grid[isForward ? j - 1 : j + 1][i] = 0\n          : grid[i][isForward ? j - 1 : j + 1] = 0;\n        score += mergedTile;\n        break;\n      }\n    }\n  }\n}\n\nfunction updateScore() {\n  document.getElementById('game-score').textContent = 'Score: ' + score;\n}\n\nfunction isGameOver() {\n  return isGridFull() && !canMakeMove();\n}\n\nfunction isGridFull() {\n  return grid.every(row => row.every(cell => cell !== 0));\n}\n\nfunction canMakeMove() {\n  for (let i = 0; i < 4; i++) {\n    for (let j = 0; j < 4; j++) {\n      const value = grid[i][j];\n\n      if (value !== 0) {\n        if (i < 3 && value === grid[i + 1][j]) {\n          return true;\n        }\n\n        if (j < 3 && value === grid[i][j + 1]) {\n          return true;\n        }\n      }\n    }\n  }\n\n  return false;\n}\n\nfunction isGameWon() {\n  for (let i = 0; i < 4; i++) {\n    for (let j = 0; j < 4; j++) {\n      if (grid[i][j] === 2048) {\n        return true;\n      }\n    }\n  }\n\n  return false;\n}\n\nfunction showGameOverMessage() {\n  const gameOverMessage = document.getElementById('game-over');\n\n  gameOverMessage.style.cssText = 'display: block;';\n}\n\nfunction showButtonRestart() {\n  const showButton = document.getElementById('restart');\n  const hiddenButton = document.getElementById('new-game');\n\n  showButton.style.cssText = 'display: block;';\n  hiddenButton.style.cssText = 'display: none;';\n}\n\nfunction showGameWinMessage() {\n  const gameWinMessage = document.getElementById('win');\n\n  gameWinMessage.style.cssText = 'display: block;';\n}\n\nfunction hideGameOverMessage() {\n  const gameOverMessage = document.getElementById('game-over');\n\n  gameOverMessage.style.cssText = 'display: none;';\n  initGame();\n}\n\nfunction hideStartGame() {\n  const startGameMassage = document.getElementById('start');\n\n  startGameMassage.style.cssText = 'display: none;';\n}\n\ninitGame();\n"]}